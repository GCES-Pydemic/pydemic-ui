import os

from pydemic.utils import pc, fmt
from .. import info
from .. import st
from ..decorators import title
from ..i18n import _, __
from ..ui import natural_date, healthcare_equipment_resources

EQUIPMENT_MESSAGE = __(
    """
The table bellow show the recommended usage of PPE by healthcare workers
during the period of simulation.
"""
)


def summary_cards(model, where=st):
    """
    Show list of summary cards for the results of simulation.
    """

    def datum(x):
        return f"{fmt(int(x))} ({pc(x / population)})"

    st = where

    region = model.region
    disease = model.disease
    results = model.results

    deaths = results["data.deaths"]
    hospitalizations = results["data.hospitalized_cases"]
    extra_icu = model["icu_overflow:max"]
    extra_hospitals = model["hospital_overflow:max"]
    recovered = results["data.recovered"]
    population = model.population

    # Print friendlier messages if region has no ICU or hospital beds
    if model.icu_capacity > 0:
        icu_overflow = results["dates.icu_overflow"]
    else:
        icu_overflow = _("No ICU beds!")
    if model.hospital_capacity > 0:
        hospital_overflow = results["dates.hospital_overflow"]
    else:
        hospital_overflow = _("No hospital beds!")

    # A peak of cases in the final date is bogus: it probably corresponds
    # to a simulation that simply did not run long enough to see the peak
    peak_cases = model["infectious:peak-date"]
    if peak_cases == model.date:
        peak_cases = _("Still coming...")

    # Do not reference Brasil.io as a data source :(
    brasil_io = '<a href="http://brasil.io" target="_blank">Brasil.io</a>'
    cases_title = _("Confirmed cases*").format(link=brasil_io)
    deaths_title = _("Confirmed deaths*").format(link=brasil_io)
    st.cards(
        {
            cases_title: fmt(info.get_confirmed_cases_for_region(region, disease)),
            deaths_title: fmt(info.get_confirmed_deaths_for_region(region, disease)),
        },
        escape=False,
        color="st-red",
    )
    st.html('<div style="height: 0.5rem;"></div>')
    st.cards(
        {
            _("Deaths"): datum(deaths),
            _("Hospitalizations"): datum(hospitalizations),
            _("Required extra ICU beds"): fmt(extra_icu),
            _("Required extra hospital beds"): fmt(extra_hospitals),
            _("No more ICU beds available by"): natural_date(icu_overflow),
            _("No more hospital beds available by"): natural_date(hospital_overflow),
            _("Estimated date for the peak"): natural_date(peak_cases),
            _("Cumulative attack rate"): pc(recovered / population),
        }
    )
    st.markdown(_("&ast; Compiled from local Healthcare Secretaries"))


@title(__("Advanced epidemiological information"))
def epidemiological_parameters(model, where=st):
    """
    Basic report with epidemiological parameters.
    """

    st = where

    days = model.iter
    mortality = model["deaths:final:pp"]
    fatality = model["empirical-CFR:final"]
    infected = model["infected:final:pp"]

    mortality *= 100_000
    mortality = fmt(mortality)
    fatality = pc(fatality)
    infected = pc(infected)
    symptomatic = pc(model.prob_symptoms)

    st.md_description(
        {
            _("Number of cases generated by a single case"): fmt(model.R0),
            _("Mortality (deaths per 100k population)"): mortality,
            _("Letality ({pc} of deaths among the ill)").format(pc="%"): fatality.rstrip(
                "%"
            ),
        }
    )
    lang = os.environ.get("LANGUAGE", "en_US")

    namespace = locals()
    del namespace["st"], namespace["model"], namespace["where"]
    st.footnote_disclaimer(**namespace)


@title(__("Personal protection equipment"))
def ppe_demand_table(model, where=None):
    """
    A simple table with the required personal protection equipment demand.
    """

    st = where

    h_days = model["severe"].sum()
    i_days = model["critical"].sum()
    table = healthcare_equipment_resources(h_days, i_days)
    table.iloc[:, -1] = table.iloc[:, -1].apply(fmt)

    st.markdown(str(EQUIPMENT_MESSAGE))  # TODO: add source
    st.table(table)

    # Legend explaining M, B, etc
    clean = lambda st: "".join(c for c in st if c.isalpha())
    letters = set(table.iloc[:, -1].apply(clean))

    lines = []
    if "M" in letters:
        lines.append(_("M = million"))
    if "B" in letters:
        lines.append(_("B = billion"))
    if lines:
        data = ", ".join(lines)
        st.html(f'<div style="font-size: smaller; text-align: right">* {data}</div>')


@title(__("Summary of model attributes and constants"))
def summary_table(
    model,
    roles=("epidemic", "clinical_rates", "clinical_periods", "mortality"),
    humanize=True,
    where=st,
):
    """
    Show table of tables with model parameters.
    """

    if isinstance(roles, str):
        roles = [roles]

    for role in roles:
        df = model.summary_table(role, humanize=humanize, translate=_)
        if df.index.name:
            df = df.reset_index().set_axis([""] * len(df))
        display_role = _(role.replace("_", " "))

        where.markdown(f"**{display_role.title()}**")
        where.table(df, role + ".csv")
